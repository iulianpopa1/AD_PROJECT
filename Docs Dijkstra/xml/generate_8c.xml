<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="generate_8c" kind="file" language="C++">
    <compoundname>generate.c</compoundname>
    <includes local="no">time.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="generate_8h" local="yes">generate.h</includes>
    <incdepgraph>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>time.h</label>
      </node>
      <node id="7">
        <label>C:/Users/catal/Desktop/chestie 8/Dijkstra/generate.c</label>
        <link refid="generate_8c"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>generate.h</label>
        <link refid="generate_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="generate_8c_1a956e2723d559858d08644ac99146e910" prot="public" static="no">
        <name>INFINITY</name>
        <initializer>99999</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/catal/Desktop/chestie 8/Dijkstra/generate.c" line="8" column="9" bodyfile="C:/Users/catal/Desktop/chestie 8/Dijkstra/generate.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="generate_8c_1ae9f3169bfb4eb4fe0cf4032e32367c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int **</type>
        <definition>int ** GenerateRandGraph</definition>
        <argsstring>(int **matrix, int *nodes_number)</argsstring>
        <name>GenerateRandGraph</name>
        <param>
          <type>int **</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nodes_number</declname>
        </param>
        <briefdescription>
<para>This method will generate an adjacency matrix and it will be stored in **matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>**matrix graph&apos;s adjacency matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>nodes_number the number of graph nodes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/catal/Desktop/chestie 8/Dijkstra/generate.c" line="15" column="1" bodyfile="C:/Users/catal/Desktop/chestie 8/Dijkstra/generate.c" bodystart="15" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File which contains the random generator. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Popa Ionut Iulian </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="generate_8h" kindref="compound">generate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="generate_8c_1a956e2723d559858d08644ac99146e910" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFINITY<sp/>99999</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="generate_8h_1a8d4ea219645520f49f17ec81bb16ef93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**<ref refid="generate_8c_1ae9f3169bfb4eb4fe0cf4032e32367c98" kindref="member">GenerateRandGraph</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**matrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodes_number){</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(time(0));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5<sp/>+<sp/>rand()<sp/>%<sp/>15;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>*nodes_number<sp/>=<sp/><sp/>n;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Resize<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**)calloc(n<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)calloc(n<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Generate<sp/>random<sp/>costs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++<sp/>){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>1<sp/>;<sp/>j<sp/>&lt;=<sp/>n<sp/>;<sp/>j++){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aux_cost<sp/>=<sp/>1<sp/>+<sp/>rand()<sp/>%<sp/>1000;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[i][j]<sp/>=<sp/>aux_cost;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[j][i]<sp/>=<sp/>aux_cost;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Main<sp/>diagonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix[i][i]<sp/>=<sp/><ref refid="generate_8c_1a956e2723d559858d08644ac99146e910" kindref="member">INFINITY</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/catal/Desktop/chestie 8/Dijkstra/generate.c"/>
  </compounddef>
</doxygen>
