<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="print_8c" kind="file" language="C++">
    <compoundname>print.c</compoundname>
    <includes refid="print_8h" local="yes">print.h</includes>
    <incdepgraph>
      <node id="23">
        <label>C:/Users/catal/Desktop/chestie 8/Dijkstra/print.c</label>
        <link refid="print_8c"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>print.h</label>
        <link refid="print_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="print_8c_1a956e2723d559858d08644ac99146e910" prot="public" static="no">
        <name>INFINITY</name>
        <initializer>99999</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/catal/Desktop/chestie 8/Dijkstra/print.c" line="7" column="10" bodyfile="C:/Users/catal/Desktop/chestie 8/Dijkstra/print.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="print_8c_1a921b41cb0b745c5a64f4987a06648ac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_matrix</definition>
        <argsstring>(int **matrix, int nodes_number)</argsstring>
        <name>print_matrix</name>
        <param>
          <type>int **</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodes_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This method will print a matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>**matrix graph&apos;s adjacency matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>nodes_number the number of graph nodes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </inbodydescription>
        <location file="C:/Users/catal/Desktop/chestie 8/Dijkstra/print.c" line="11" column="1" bodyfile="C:/Users/catal/Desktop/chestie 8/Dijkstra/print.c" bodystart="11" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a01afacd84ffc5fc3e8dc660873b73452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_path</definition>
        <argsstring>(int **matrix, int nodes_number, int start_node, int end_node, int distance[], int predecessor[])</argsstring>
        <name>print_path</name>
        <param>
          <type>int **</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodes_number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>distance</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>predecessor</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This method will print the path. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>**matrix graph&apos;s adjacency matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>nodes_number the number of graph nodes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>start_node first node pf the path. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>end_node last node pf the path. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>distance[i] the shortest distance from start node to i </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para>predecessor[i] predecessor of each node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </inbodydescription>
        <location file="C:/Users/catal/Desktop/chestie 8/Dijkstra/print.c" line="30" column="1" bodyfile="C:/Users/catal/Desktop/chestie 8/Dijkstra/print.c" bodystart="30" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File which contains the printing functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Popa Ionut Iulian </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8h" kindref="compound">print.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="print_8c_1a956e2723d559858d08644ac99146e910" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFINITY<sp/>99999</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="print_8h_1a921b41cb0b745c5a64f4987a06648ac2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a921b41cb0b745c5a64f4987a06648ac2" kindref="member">print_matrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**matrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes_number){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>nodes\n&quot;</highlight><highlight class="normal">,<sp/>nodes_number);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>nodes_number;<sp/>i++){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>nodes_number;<sp/>j++){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%5d<sp/>&quot;</highlight><highlight class="normal">,matrix[i][j]%<ref refid="print_8c_1a956e2723d559858d08644ac99146e910" kindref="member">INFINITY</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="print_8h_1a01afacd84ffc5fc3e8dc660873b73452" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a01afacd84ffc5fc3e8dc660873b73452" kindref="member">print_path</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**matrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>predecessor[]){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//print<sp/>the<sp/>path<sp/>and<sp/>distance<sp/>between<sp/>start<sp/>and<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nDistance<sp/>between<sp/>node<sp/>%d<sp/>and<sp/>node<sp/>%d<sp/>=<sp/>%d<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>start_node,<sp/>end_node,<sp/>distance[end_node]);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>end_node;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nPath<sp/>:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i<sp/>!=<sp/>start_node){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>predecessor[i];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>&lt;-<sp/>%d&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//print<sp/>alternative<sp/>route</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>end_node;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nAlternative<sp/>path<sp/>for<sp/>each<sp/>consecutive<sp/>nodes<sp/>:<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i<sp/>!=<sp/>start_node){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_distance<sp/>=<sp/><ref refid="print_8c_1a956e2723d559858d08644ac99146e910" kindref="member">INFINITY</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intermediary<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>nodes_number;<sp/>j++){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matrix[i][j]<sp/>+<sp/>matrix[j][<sp/>predecessor[i]<sp/>]<sp/>&lt;<sp/>min_distance<sp/>){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_distance<sp/>=<sp/>matrix[i][j]<sp/>+<sp/>matrix[j][<sp/>predecessor[i]<sp/>];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intermediary<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Intermediary<sp/>node<sp/>between<sp/>%d<sp/>&amp;<sp/>%d<sp/>:<sp/>%d<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>predecessor[i],<sp/>intermediary);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>predecessor[i];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/catal/Desktop/chestie 8/Dijkstra/print.c"/>
  </compounddef>
</doxygen>
